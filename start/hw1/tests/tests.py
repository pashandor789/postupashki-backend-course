#!/usr/bin/env python3
import os
import sys
import time
import subprocess
import threading
import signal
import json
import re
from pathlib import Path
from http.server import HTTPServer, BaseHTTPRequestHandler
from socketserver import ThreadingMixIn
from urllib.parse import urlparse, parse_qs

try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False

try:
    from colorama import init, Fore, Style
    init()
    COLORS_AVAILABLE = True
except ImportError:
    COLORS_AVAILABLE = False

class DelayHTTPHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        parsed_path = urlparse(self.path)
        params = parse_qs(parsed_path.query)

        delay = 0
        if 'delay' in params:
            try:
                delay = float(params['delay'][0])
            except (ValueError, IndexError):
                delay = 0

        if delay > 0:
            time.sleep(delay)

        response_data = {
            "url": f"http://localhost:{self.server.server_port}{self.path}",
            "method": "GET",
            "delay": delay,
            "headers": dict(self.headers),
            "timestamp": time.time()
        }

        response_json = json.dumps(response_data, indent=2).encode('utf-8')

        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Content-Length', str(len(response_json)))
        self.end_headers()
        self.wfile.write(response_json)

    def log_message(self, format, *args):
        pass

class ThreadingHTTPServer(ThreadingMixIn, HTTPServer):
    daemon_threads = True
    allow_reuse_address = True

class TestHTTPServer:
    def __init__(self, port=0):
        self.server = ThreadingHTTPServer(('localhost', port), DelayHTTPHandler)
        self.server.server_port = self.server.server_address[1]
        self.port = self.server.server_port
        self.thread = None

    def start(self):
        self.thread = threading.Thread(target=self.server.serve_forever)
        self.thread.daemon = True
        self.thread.start()

    def stop(self):
        if self.server:
            self.server.shutdown()
            self.server.server_close()
        if self.thread:
            self.thread.join(timeout=1)

class TestRunner:
    def __init__(self):
        self.test_results = []
        self.compilation_failed = False
        self.failure_reason = ""
        self.test_servers = []

    def log(self, message, color=None):
        if COLORS_AVAILABLE and color:
            print(f"{color}{message}{Style.RESET_ALL}")
        else:
            print(message)

    def success(self, message):
        self.log(f"‚úÖ {message}", Fore.GREEN)

    def error(self, message):
        self.log(f"‚ùå {message}", Fore.RED)

    def info(self, message):
        self.log(f"‚ÑπÔ∏è  {message}", Fore.BLUE)

    def warning(self, message):
        self.log(f"‚ö†Ô∏è  {message}", Fore.YELLOW)

    def check_scripts_exist(self):
        required_scripts = ['compile.sh', 'execute.sh']
        missing_scripts = []

        for script in required_scripts:
            if not os.path.exists(script):
                missing_scripts.append(script)

        if missing_scripts:
            self.failure_reason = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {', '.join(missing_scripts)}"
            self.error(self.failure_reason)
            return False

        return True

    def check_hedgedcurl_exists(self):
        possible_files = [
            'hedgedcurl.py', 'hedgedcurl.go',
            'hedgedcurl.cpp', 'hedgedcurl.java'
        ]

        for filename in possible_files:
            if os.path.exists(filename):
                self.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {filename}")
                return True

        self.failure_reason = "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª hedgedcurl —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º"
        self.error(self.failure_reason)
        self.error(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(possible_files)}")
        return False

    def compile_code(self):
        self.info("–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏...")
        result = subprocess.run(['./compile.sh'], capture_output=True, text=True)
        if result.returncode != 0:
            self.compilation_failed = True
            self.failure_reason = f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {result.stderr.strip() or result.stdout.strip() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
            self.error(self.failure_reason)
            return False

        self.success("–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

    def start_test_servers(self):
        try:
            for _ in range(3):
                server = TestHTTPServer()
                server.start()
                self.test_servers.append(server)
                self.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {server.port}")

            time.sleep(0.5)
            return True

        except Exception as e:
            self.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            return False

    def stop_test_servers(self):
        for server in self.test_servers:
            try:
                server.stop()
            except Exception as e:
                self.warning(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        self.test_servers.clear()

    def run_hedgedcurl(self, urls, timeout=30):
        try:
            cmd = ['./execute.sh'] + urls
            start_time = time.time()

            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=timeout
            )

            end_time = time.time()
            execution_time = end_time - start_time

            return {
                'returncode': result.returncode,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'execution_time': execution_time
            }

        except subprocess.TimeoutExpired:
            self.error(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è hedgedcurl ({timeout}s) - —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
            return None
        except FileNotFoundError:
            self.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å execute.sh")
            return None
        except Exception as e:
            self.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ hedgedcurl: {e}")
            return None

    def test_single_url(self):
        if not self.test_servers:
            return False

        server = self.test_servers[0]
        url = f"http://localhost:{server.port}/test"

        self.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–¥–Ω–∏–º URL...")
        result = self.run_hedgedcurl([url])

        if not result:
            return False

        if result['returncode'] != 0:
            self.error(f"hedgedcurl –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result['stderr']}")
            return False

        if not result['stdout'].strip():
            self.error("hedgedcurl –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏–∫–∞–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞")
            return False

        self.success("–¢–µ—Å—Ç —Å –æ–¥–Ω–∏–º URL –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        return True

    def test_hedging_with_delays(self):
        if len(self.test_servers) < 3:
            return False

        urls = [
            f"http://localhost:{self.test_servers[0].port}/test?delay=10",
            f"http://localhost:{self.test_servers[1].port}/test?delay=10",
            f"http://localhost:{self.test_servers[2].port}/test?delay=0"
        ]

        result = self.run_hedgedcurl(urls, timeout=25)

        if not result:
            return False

        if result['returncode'] != 0:
            self.error(f"hedgedcurl –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result['stderr']}")
            return False

        execution_time = result['execution_time']

        MAX_ALLOWED_TIME = 3.0
        if execution_time > MAX_ALLOWED_TIME:
            self.error(f"–ü–†–û–í–ê–õ: hedgedcurl –≤—ã–ø–æ–ª–Ω—è–ª—Å—è {execution_time:.2f}s")
            self.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {MAX_ALLOWED_TIME}s –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
            self.error("–í–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ù–ï –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–ê–Ø (–∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)")
            self.error("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: asyncio, threading, –≥–æ—Ä—É—Ç–∏–Ω—ã –∏ —Ç.–¥.")
            return False
        else:
            self.success(f"OK: hedgedcurl –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –∑–∞ {execution_time:.2f}s")

        if 'localhost' in result['stdout'] and '"delay": 0' in result['stdout']:
            self.success("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (delay=0)")
            return True
        else:
            self.error("–ù–µ –ø–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            return False

    def test_error_handling(self):
        invalid_urls = [
            "http://localhost:99999/nonexistent",
            "invalid-url",
            "http://nonexistent-domain-12345.com/"
        ]

        self.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        args = ["-t", "20"]
        result = self.run_hedgedcurl(args + invalid_urls, timeout=25)

        execution_time = result["execution_time"]
        MAX_ALLOWED_TIME = 5.0
        
        if not result:
            return False

        if result['returncode'] == 0:
            self.warning("hedgedcurl –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö URL")
            self.warning("–û–∂–∏–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π")
            return False
        elif execution_time > MAX_ALLOWED_TIME:
            self.warning("–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            return False
        else:
            self.success("hedgedcurl –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ—à–∏–±–∫–∏")

        return True

    def test_mixed_valid_invalid(self):
        if not self.test_servers:
            return False

        mixed_urls = [
            "http://localhost:99999/nonexistent",
            f"http://localhost:{self.test_servers[0].port}/test?delay=0.5",
            "http://nonexistent-domain-12345.com/"
        ]

        self.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏/–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ URL...")
        result = self.run_hedgedcurl(mixed_urls)

        if not result:
            return False

        if result['returncode'] != 0:
            self.warning("hedgedcurl –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL")
        else:
            self.success("hedgedcurl –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–º–µ—à–∞–Ω–Ω—ã–µ URL")

        if 'localhost' in result['stdout']:
            self.success("hedgedcurl –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –æ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            return True
        else:
            self.warning("hedgedcurl –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –æ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            return False

    def test_output_format(self):
        if not self.test_servers:
            return False

        server = self.test_servers[0]
        url = f"http://localhost:{server.port}/test"

        self.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞...")
        result = self.run_hedgedcurl([url])

        if not result:
            return False

        if result['returncode'] != 0:
            self.error(f"hedgedcurl –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result['stderr']}")
            return False

        output = result['stdout']

        if not ('HTTP/' in output and ('200' in output or '201' in output or '202' in output)):
            self.error("–í –≤—ã–≤–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: HTTP/1.1 200 OK)")
            return False
        else:
            self.success("HTTP —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ")

        headers_found = False
        for header in ['Content-Type:', 'Content-Length:', 'Date:', 'Server:']:
            if header in output:
                headers_found = True
                break

        if not headers_found:
            self.error("–í –≤—ã–≤–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ (Content-Type, Content-Length –∏ —Ç.–¥.)")
            return False
        else:
            self.success("HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–≤–æ–¥–µ")

        if not ('{' in output and '}' in output and 'localhost' in output):
            self.error("–í –≤—ã–≤–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞")
            return False
        else:
            self.success("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ã–≤–æ–¥–µ")

        lines = output.split('\n')

        self.success("–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        return True

    def test_help_flag(self):
        self.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ–ª–∞–∂–∫–æ–≤ -h –∏ --help...")

        result_h = self.run_hedgedcurl(["-h"], timeout=5)
        if not result_h:
            self.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å hedgedcurl —Å —Ñ–ª–∞–∂–∫–æ–º -h")
            return False

        if result_h['returncode'] != 0:
            self.error("hedgedcurl -h –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return False

        if not result_h['stdout'].strip():
            self.error("–§–ª–∞–∂–æ–∫ -h –Ω–µ –≤—ã–≤–µ–ª —Å–ø—Ä–∞–≤–∫—É")
            return False

        self.success("–§–ª–∞–∂–æ–∫ -h —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        result_help = self.run_hedgedcurl(["--help"], timeout=5)
        if not result_help:
            self.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å hedgedcurl —Å —Ñ–ª–∞–∂–∫–æ–º --help")
            return False

        if result_help['returncode'] != 0:
            self.error("hedgedcurl --help –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return False

        if not result_help['stdout'].strip():
            self.error("–§–ª–∞–∂–æ–∫ --help –Ω–µ –≤—ã–≤–µ–ª —Å–ø—Ä–∞–≤–∫—É")
            return False

        self.success("–§–ª–∞–∂–æ–∫ --help —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        self.success("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–∂–∫–æ–≤ -h –∏ --help –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

    def test_timeout_flag(self):
        if not self.test_servers:
            return False

        server = self.test_servers[0]
        url = f"http://localhost:{server.port}/test?delay=10"

        self.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–ª–∞–∂–∫–∞ --timeout...")

        result = self.run_hedgedcurl(["-t", "1", url], timeout=5)
        if not result:
            return False

        if result['returncode'] != 228:
            self.error(f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Å –∫–æ–¥–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞ 228, –Ω–æ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result['returncode']}")
            return False

        self.success("–¢–µ—Å—Ç —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        return True

    def run_tests(self):
        self.log("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è ‚Ññ1 - hedgedcurl", Fore.CYAN)

        if not self.check_scripts_exist():
            return False

        if not self.check_hedgedcurl_exists():
            return False

        if not self.compile_code():
            return False

        if not self.start_test_servers():
            return False

        try:
            tests = [
                ("–¢–µ—Å—Ç —Å –æ–¥–Ω–∏–º URL", self.test_single_url),
                ("–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞", self.test_output_format),
                ("–¢–µ—Å—Ç —Ñ–ª–∞–∂–∫–∞ --help", self.test_help_flag),
                ("–¢–µ—Å—Ç —Ñ–ª–∞–∂–∫–∞ --timeout", self.test_timeout_flag),
                ("–¢–µ—Å—Ç —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏", self.test_hedging_with_delays),
                ("–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫", self.test_error_handling),
                ("–¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö URL", self.test_mixed_valid_invalid)
            ]

            all_passed = True
            for test_name, test_func in tests:
                self.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {test_name}")
                if test_func():
                    self.test_results.append((test_name, True))
                else:
                    self.test_results.append((test_name, False))
                    all_passed = False
                print()

            return all_passed

        finally:
            self.stop_test_servers()

    def print_summary(self):
        print("=" * 60)
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢", Fore.CYAN)
        print("=" * 60)

        if self.compilation_failed or self.failure_reason:
            if self.failure_reason:
                self.error(f"–ü–†–û–í–ê–õ: {self.failure_reason}")
            else:
                self.error("–ü–†–û–í–ê–õ: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
            print("-" * 60)
            self.log("‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", Fore.RED)
            return

        passed = sum(1 for _, result in self.test_results if result)
        total = len(self.test_results)

        if total == 0:
            self.error("–ü–†–û–í–ê–õ: –¢–µ—Å—Ç—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã")
            print("-" * 60)
            self.log("‚ùå –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", Fore.RED)
            return

        for test_name, result in self.test_results:
            if result:
                self.success(f"{test_name}")
            else:
                self.error(f"{test_name}")

        print("-" * 60)
        if passed == total:
            self.success(f"–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã: {passed}/{total}")
            self.log("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! hedgedcurl —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!", Fore.GREEN)
        else:
            self.error(f"–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã: {passed}/{total}")
            self.log("‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å", Fore.RED)

def main():
    os.chdir(Path(__file__).parent.parent)

    runner = TestRunner()

    try:
        success = runner.run_tests()
        runner.print_summary()
        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        runner.log("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", Fore.YELLOW)
        runner.stop_test_servers()
        sys.exit(1)
    except Exception as e:
        runner.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        runner.stop_test_servers()
        sys.exit(1)

if __name__ == "__main__":
    main()
